#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express-app:server');
var http = require('http');
var mongoose = require('mongoose')
const socketIO = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = socketIO(server, {
    cors: {
        origin: "http://localhost:3000"
    }
});

/**
 * Connect to MongoDB 
 */

var mongodb_cs = process.env.MONGODB_CS;
mongoose.connect(mongodb_cs)
    .then(
        () => {
            console.log('Connection Successful to MongoDB');

            io.on('connection', onIOConnection);

            /**
             * Listen on provided port, on all network interfaces.
             */

            server.listen(port, () => { console.log('Listening on PORT=' + port) });
            server.on('error', onError);
            server.on('listening', onListening);
        }
    )
    .catch((err) => { console.log('Can not connect to MongoDB: ' + err) });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

/**
 * Socket Connection
 */

const rooms = {};

function onIOConnection(socket) {

    socket.on('create', (room, videoElement) => {
        socket.join(room);
        if (!rooms[room]) {
            rooms[room] = videoElement;
        }
        io.to(room).emit('initialState', rooms[room]);
    });

    socket.on('join', (room) => {
        socket.join(room);
        io.to(room).emit('joined', rooms[room]);
    });

    socket.on('play', (room) => {
        io.to(room).emit('play');
    });

    socket.on('pause', (room) => {
        io.to(room).emit('pause');
    });

    socket.on('timeline', (room, time) => {
        if (rooms[room])
            rooms[room].time = time;
    });

    socket.on('getLiveTime', (room) => {
        if (rooms[room])
            io.to(room).emit('liveTime', rooms[room].time);
    })

    // socket.on('disconnect', () => {
    //     console.log('A user disconnected');
    // });

    socket.on('chat broadcast', (room, username, message) => {
        if (rooms[room])
            io.to(room).emit('chat recieve', { username, message });
    });

}